import "sys.base";
import "sys.list";
import "sys.proc";
import "sys.task";
import "sys.string";

call g_set_process_desc("test routinue");
var pid = call g_get_pid();
var share = call g_wait_share("PID#" + pid);
call g_stop_share("PID#" + pid);
var args = call g_map_get(share, "args");

var in = call g_create_pipe("PIPEIN#" + pid);
var out = call g_create_pipe("PIPEOUT#" + pid);

var put = func ["PIPE"] ~(ch) {
    call g_write_pipe(out, ch);
};
var puts = func ["PIPE"] ~(str) {
    foreach (var c : call g_range_string(str)) {
        call g_write_pipe(out, c);
    }
};
var signal = "PIDSIG#" + pid;
call g_start_share(signal, true);

/* 创建场景 */
var create_stage = func ~(f) -> call f();

/* 重复操作 */
var real_repeat = func ~(_operation, _arg, _start, _end) {
    var repeat = func ~(operation, arg, start, end) {
        var index = start;
        var repeat0 = func ~() {
            if (index >= end) { return; }
            call operation(arg, index);
            return call repeat(operation, arg, ++index, end);
        };
        return repeat0;
    };
    var repear_f = func ~() -> call repeat(_operation, _arg, _start, _end);
    call(func ~(f) {
        while (!(call g_is_null(f)) && (call g_get_type_ordinal(f) == 8)) {
            let f = call f();
        }
    })(repear_f);
};
    
/* 打字效果 */
var word_typewrite0 = func ~(str, span) {
    var print = func ~(a, n) {
        call put(call g_string_char(a, n));
        call g_sleep(span);
    };
    call real_repeat(print, str, 0, call g_string_length(str));
};

/* 打字效果 */
var word_typewrite = func ~(str, span) {
    foreach (var c : call g_range_string(str)) {
        call put(c);
        call g_task_sleep_ms(span);
    }
};

/* 清屏 */
var stage_clear = func ~() {
    call word_typewrite("Are you ready?", 200);
    call word_typewrite("  3!  2!  1!\n", 300);
    call word_typewrite("  Let's go!!!   \n", 300);
    call put('\f');
};

/* 场景一 */
var stage_1 = func ~() {
    call puts(call g_string_rep(" ", 31));
    call word_typewrite("- Stage 1 -\n", 400);
    call word_typewrite("* Hello world! 你好！\n", 80);
    call word_typewrite("* This is a test program. 这是一个测试程序。\n", 80);
    call word_typewrite("* Made by bajdcc. 由bajdcc编写。\n", 80);
    call word_typewrite("* 项目网址在 https://github.com/bajdcc/jMiniLang 上。\n", 100);
    call word_typewrite("* 这是我做的一个脚本操作系统。\n", 100);
    call word_typewrite("* 支持闭包、进程、管道、互斥等特性。\n", 100);
    call word_typewrite("* 不过由于设计不足以及Java的使用，脚本运行还是太慢。\n", 100);
    call word_typewrite("* 最让我兴奋的是语法分析的实现、虚拟机的构建、同步/异步语义的实现。\n", 100);
    call word_typewrite("* 进程、管道、互斥是这个操作系统的基础。\n", 100);
    call word_typewrite("\n\n\n\n", 400);
    call puts(call g_string_rep(" ", 31));
    call word_typewrite("- @bajdcc -\n", 400);
};

// ------------------------------------

/* 哲学家就餐问题 */
var stage_philo = func ~() {
    call word_typewrite("演示哲学家就餐问题！    \n", 100);
    var print_mutex = call g_create_mutex("philo_print");
    foreach (var i : call g_range(1, 5)) {
        call g_create_semaphore("fork_" + i, 1); // 每个叉最多能使用一次
    }
    var handles = [];
    var philo = func ~(args) {
        var eat = call g_map_get(args, "eating");
        var o = call g_map_get(args, "out");
        var id = call g_map_get(args, "id");
        var left_id = call g_map_get(args, "left_id");
        var right_id = call g_map_get(args, "right_id");
        var left = call g_use_semaphore("fork_" + left_id);
        var right = call g_use_semaphore("fork_" + right_id);
        call eat(o, "Philosophy#" + id + " ready");
        foreach (var j : call g_range(1, 10)) {
            call g_lock_semaphore(left);
            call eat(o, "Philosophy#" + id + " is using fork#" + left_id);
            call g_lock_semaphore(right);
            call eat(o, "Philosophy#" + id + " is using fork#" + right_id);
            call eat(o, "Philosophy#" + id + " is eating. Process: " + j + "0%");
            call g_unlock_semaphore(left);
            call g_unlock_semaphore(right);
        }
        call eat(o, "Philosophy#" + id + " OK");
    };
    var eating = func ~(out, str) {
        var pm = call g_use_mutex("philo_print");
        call g_lock_mutex(pm);
        foreach (var c : call g_range_string(str)) {
            call g_write_pipe(out, c);
        }
        call g_write_pipe(out, '\n');
        call g_task_sleep_ms(100);
        call g_unlock_mutex(pm);
    };
    foreach (var j : call g_range(1, 5)) {
        var args = {};
        call g_map_put(args, "eating", eating);
        call g_map_put(args, "out", out);
        call g_map_put(args, "id", j);
        call g_map_put(args, "left_id", (j == 1) ? 5 : (j - 1));
        call g_map_put(args, "right_id", (j == 5) ? 1 : (j + 1));
        var h = call g_create_user_process_args(philo, args);
        call g_array_add(handles, h);
        call g_task_sleep(1);
    }
    call g_join_process_array(handles);
    foreach (var k : call g_range(1, 5)) {
        call g_destroy_semaphore(call g_use_semaphore("fork_" + k));
    }
    call g_destroy_mutex(call g_use_mutex("philo_print"));
};

var name = call g_array_get(args, 0);
if (call g_is_null(name)) {
    call create_stage(stage_clear);
    call create_stage(stage_1);
} else if (name == "philo") {
    call create_stage(stage_philo);
}

call g_stop_share(signal);
call g_destroy_pipe(out);
call g_destroy_pipe(in);